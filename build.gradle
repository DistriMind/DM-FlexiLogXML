plugins {
    id "eclipse"
    id "idea"
}
/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.1/userguide/java_library_plugin.html
 */

Properties props = new Properties()
def propFile = new File(project.getProjectDir().getParentFile(), 'credentials.properties')
def artifactoryUrl = "https://artifactory.distri-mind.fr:443/artifactory"
def sonatypeStagingUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
def artifactoryUser = ""
def artifactoryPwd = ""
def sonatypeUser = ""
def sonatypePwd = ""

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))


    if (props != null && props.containsKey('artifactory_contextUrl'))
        artifactoryUrl = props.get("artifactory_contextUrl")
    if (props != null && props.containsKey('artifactory_user'))
        artifactoryUser = props.get("artifactory_user")
    if (props != null && props.containsKey('artifactory_password'))
        artifactoryPwd = props.get("artifactory_password")
    if (props != null && props.containsKey('sonatype_staging_url'))
        sonatypeStagingUrl = props.get("sonatype_staging_url")
    if (props != null && props.containsKey('sonatype_user'))
        sonatypeUser = props.get("sonatype_user")
    if (props != null && props.containsKey('sonatype_password'))
        sonatypePwd = props.get("sonatype_password")
}



subprojects {
    repositories {


        maven {
            url = "${artifactoryUrl}/gradle-release/"
            if (artifactoryUser != "") {
                credentials {
                    username = "${artifactoryUser}"
                    password = "${artifactoryPwd}"
                }
            }
        }

    }
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: "maven-publish"
    apply plugin: "signing"
    apply plugin: "pmd"


    eclipse {
        classpath {
            downloadSources = true
        }
    }

    pmd {
        consoleOutput = true
        toolVersion = "7.9.0"
        rulesMinimumPriority = 5
        ruleSetFiles = files("../pmd/pmd-rules.xml")
    }

    version = '1.3.2-STABLE'



    def projectName=project.name

    jar {
        manifest {
            attributes('Implementation-Title': project.name)
            attributes('Implementation-Version': project.version)
        }
        from('../COPYING') {
            rename { fileName ->
                "COPYING-$projectName"
            }
        }
        from('../NOTICE') {
            rename { fileName ->
                "NOTICE-$projectName"
            }
        }
        from('../changelog.md') {
            rename { fileName ->
                "changelog-$projectName"
            }
        }
    }


    tasks.register('sourcesJar', Jar) {

        archiveClassifier.set("sources")
        from sourceSets.main.allSource
        manifest {
            attributes('Implementation-Title': project.name)
            attributes('Implementation-Version': project.version)
        }

        from('../COPYING') {
            rename { fileName ->
                "COPYING-$projectName"
            }
        }
        from('../NOTICE') {
            rename { fileName ->
                "NOTICE-$projectName"
            }
        }
        from('../changelog.md') {
            rename { fileName ->
                "changelog-$projectName"
            }
        }
    }

    tasks.register('javadocJar', Jar) {

        archiveClassifier.set("javadoc")
        from javadoc.destinationDir
        manifest {
            attributes('Implementation-Title': project.name)
            attributes('Implementation-Version': project.version)
        }
        from('../COPYING') {
            rename { fileName ->
                "COPYING-$projectName"
            }
        }
        from('../NOTICE') {
            rename { fileName ->
                "NOTICE-$projectName"
            }
        }
        from('../changelog.md') {
            rename { fileName ->
                "changelog-$projectName"
            }
        }
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }



    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = 'DM-FlexiLogXML'
                    description = 'Set of Java tools'
                    url = 'https://git.distri-mind.fr/DM-FlexiLogXML'
                    developers {
                        developer {
                            id = 'jmahdjoub'
                            name = 'Jason Mahdjoub'
                            email = 'jason.mahdjoub@distri-mind.fr'
                            organization = 'DistriMind'
                        }
                    }
                    organization {
                        name = 'DistriMind'
                        url = 'https://github.com/JasonMahdjoub'
                    }
                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/JasonMahdjoub/Utils/issues'
                    }
                    scm {
                        connection = 'https://github.com/JasonMahdjoub/Utils'
                        developerConnection = connection
                        url = connection
                    }
                    licenses {
                        license {
                            name = 'GNU Lesser General Public License version 3 only (LGPL-3.0-only)'
                            url = 'https://git.distri-mind.fr/DM-FlexiLogXML/~files/main/COPYING'
                        }
                    }

                }
            }
        }
        repositories {
            maven {
                credentials {
                    username = "${artifactoryUser}"
                    password = "${artifactoryPwd}"
                }
                url = "${artifactoryUrl}/DistriMind-Public"
            }
            maven {
                credentials {
                    username = "${sonatypeUser}"
                    password = "${sonatypePwd}"
                }
                url = "${sonatypeStagingUrl}"
            }
        }
    }
    signing {
        useGpgCmd()
        required = { !project.hasProperty('disableSigning') }
        if (required) {
            sign configurations.archives
            sign publishing.publications.mavenJava
        }

    }



}